// interfazBatalla.js

import { ataqueAleatorioEnemigo } from "./ctrlMishimonGame.js";
import { ejecutarTurno } from "./turnoHandler.js";


import { 
    ataquesEnemigoDisponibles,
    divAreaTarjetasAtaques,
    estadoBatalla,
    gameState } from "../../data/sharedData.js";

// Funci√≥n para mostrar el modal
function mostrarVentanaBatalla() {
    sectionSeleccionarAtaque.style.display = "block";
    modalOverlay.style.display = "block";
    console.log("üé¨ Ventana de batalla mostrada. Esperando selecci√≥n del jugador...");
}

function mostrarBotonesAtaque(ataquesJugador) {
    divAreaTarjetasAtaques.innerHTML = `<h2 class="subtitulo">Tus Ataques:</h2>`; 

    ataquesJugador.forEach(ataque => {
        const btnAtaque = document.createElement("button");
        btnAtaque.id = ataque.id;
        btnAtaque.classList.add("boton-de-ataque");
        btnAtaque.innerText = ataque.nombre;

        // Evento al hacer clic (ataque)
        btnAtaque.addEventListener("click", () => {
            if (btnAtaque.disabled) return;

            estadoBatalla.ataqueSeleccionadoJugador = ataque.nombre;
            console.log(`üéØ Ataque seleccionado por el jugador: ${estadoBatalla.ataqueSeleccionadoJugador}`);

            // Marcar bot√≥n como usado (deshabilitado)
            btnAtaque.disabled = true;
            btnAtaque.classList.add("boton-deshabilitado");

            // üõ† El enemigo selecciona su ataque autom√°ticamente
            estadoBatalla.ataqueSeleccionadoEnemigo = ataqueAleatorioEnemigo();

            ejecutarTurno();
        });

        divAreaTarjetasAtaques.appendChild(btnAtaque);
    });
    console.log("‚úÖ Botones de ataque generados correctamente con:", ataquesJugador );
}

function actualizarVidasEnElDOM() {
    document.getElementById("pContadorVidasJugador").innerHTML = gameState.vidasJugador;
    document.getElementById("pContadorVidasEnemigo").innerHTML = gameState.vidasEnemigo;
}

function determinarResultadoCombate() {;
    if (!estadoBatalla.ataqueSeleccionadoJugador || !estadoBatalla.ataqueSeleccionadoEnemigo) {
         console.error("‚ùå Error: ataqueSeleccionadoJugador o ataqueSeleccionadoEnemigo no est√°n definidos.");
        return "‚ö† Error en la batalla, intenta de nuevo.";
    }

    if (estadoBatalla.ataqueSeleccionadoJugador === estadoBatalla.ataqueSeleccionadoEnemigo) {
        return "Empate!!";
    } else if (
        (estadoBatalla.ataqueSeleccionadoJugador === "üî•" && estadoBatalla.ataqueSeleccionadoEnemigo === "üå±") ||
        (estadoBatalla.ataqueSeleccionadoJugador === "üíß" && estadoBatalla.ataqueSeleccionadoEnemigo === "üî•") ||
        (estadoBatalla.ataqueSeleccionadoJugador === "üå±" && estadoBatalla.ataqueSeleccionadoEnemigo === "üíß")
    ) {
        gameState.vidasEnemigo--;  
        return "Ganaste!! üéâ";
    } else {
        gameState.vidasJugador--;
        return "Perdiste!! üò¢";
    }
}

function cerrarVentanaBatalla() {
    sectionSeleccionarAtaque.style.display = "none"; // Ocultar el modal
    modalOverlay.style.display = "none"; // Ocultar el fondo oscuro
    console.log("‚ùå Cerrando el men√∫ de selecci√≥n de ataque.");
}

if (btnCerrarBatalla) {
    btnCerrarBatalla.addEventListener("click", cerrarVentanaBatalla);
    } else {
       console.warn("‚ö† No se encontr√≥ el bot√≥n 'btnCerrarBatalla'. Aseg√∫rate de que el HTML lo carga antes.");
}


// Exportar las funciones para su uso en otros archivos
export { 
    mostrarVentanaBatalla, 
    cerrarVentanaBatalla, 
    mostrarBotonesAtaque, 
    determinarResultadoCombate,
    actualizarVidasEnElDOM };
